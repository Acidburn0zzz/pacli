#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#################################################################
# Design based on IceFox script                                 #
# Modified, adapted and improved by pekman and excalibur1234    #
# translation by spylinux                                       #
# fzf and Downgrade support added by Chrysostomus               #
# Contact and suggestions: pekman@openmailbox.org               #
# Freenode: #manjaropek #manjaro-geek #manjaro                  #
# Topic discussion                                              #
#                       http://polr.me/pacli1                   #
#################################################################

pkgname=pacli
pacli_desc='/tmp/pacli-desc'

# load tools functions
libfile='./lib/pacli-tools.sh'
[ -f "$libfile" ] || libfile="/usr/lib/${pkgname}/pacli-tools.sh"
. "$libfile"

########    menu    ########

# set colors
RED='\e[31m'
NC='\e[0m'

#width menu -3
declare WMENU=68
((WMENU %2 )) && ((WMENU++))

########    functions    ########

# "yaourt -Sl" downloads a list of packages EVERY TIME it is called. this is unacceptable.
# write package list of repositories to /tmp/packages. then, download AUR package list, unzip it to /tmp/aur/packages, and add it to the bottom of /tmp/packages.
load_packages_infos()
{
    pacman -Slq 2>/dev/null 1>/tmp/packages &
    wget -P /tmp/aur/ https://aur.archlinux.org/packages.gz >/dev/null 2>&1 && gunzip -f /tmp/aur/packages.gz && cat /tmp/aur/packages >> /tmp/packages &
}

########    pacman    ######

#13    fix errors
fix_errors()
{
    declare cmd url version arch
    sudo rm -f /var/lib/pacman/db.lck
    cmd=(sudo pacman -Syy)
    if [ -f "/usr/bin/pacman-mirrors" ]; then
        sudo pacman-mirrors -g && "${cmd[@]}"

        sudo rm -r /etc/pacman.d/gnupg
        arch=$(uname -m)
        mybranch=$(awk -F'=' '/^Branch/ {print $2}' /etc/pacman-mirrors.conf)
        [ -z "$mybranch" ] && mybranch='stable'
        version="$(lang=C pacman -Si gnupg | awk -F':' ' /^Ver/ {print $2}' | sed 's# #-#' | head -n 1 )"
        url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/gnupg${version}-${arch}.pkg.tar.xz"
        wget "${url}" && sudo pacman -U "gnupg${version}-${arch}.pkg.tar.xz" && sudo rm "gnupg${version}-${arch}.pkg.tar.xz"

        version="$(lang=C pacman -Si archlinux-keyring | awk -F':' ' /^Ver/ {print $2}' | sed 's# #-#' | head -n 1 )"
        url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/archlinux-keyring${version}-any.pkg.tar.xz"
        wget "${url}" && sudo pacman -U "archlinux-keyring${version}-any.pkg.tar.xz" && sudo rm "archlinux-keyring${version}-any.pkg.tar.xz"

        version="$(lang=C pacman -Si manjaro-keyring | awk -F':' ' /^Ver/ {print $2}' | sed 's# #-#' | head -n 1 )"
        url="http://mirror.netzspielplatz.de/manjaro/packages/${mybranch}/core/${arch}/manjaro-keyring${version}-any.pkg.tar.xz"
        wget "${url}" && sudo pacman -U "manjaro-keyring${version}-any.pkg.tar.xz" && sudo rm "manjaro-keyring${version}-any.pkg.tar.xz"

        sudo pacman-key --init && sudo pacman-key --populate archlinux manjaro
    elif [[ -f "/usr/bin/reflector" ]]; then
        sudo reflector --verbose -l 4 -p http --sort rate --save /etc/pacman.d/mirrorlist && "${cmd[@]}"
        sudo pacman -Sy gnupg archlinux-keyring && sudo rm -r /etc/pacman.d/gnupg && sudo pacman-key --init && sudo pacman-key --populate archlinux && sudo pacman-key --refresh-keys
    else
        "${cmd[@]}"
    fi

    sudo pacman -Syyuu --color always
    print_prompt "$(gettext 'Most common Pacman errors fixed and system updated')." "" 1
}

########    PACTREE    ########

#7
pactree_run()
{
    declare pkg=$(print_enter "$(gettext 'Select a package')" "$(pacman -Slq)" )
    (($?!=0)) && return 1
    [ -z "$pkg" ] && return 1
    #declare option='s' AUR or NOT ?
    pactree -c${option} "${pkg}" 2>/dev/null
    print_prompt "$(gettext 'Dependency tree displayed')." "" 1
}

#8
pactree_reverse()
{
    declare pkg=$(print_enter "$(gettext 'Select a package')" "$(pacman -Qq)" )
    (($?!=0)) && return 1
    [ -z "$pkg" ] && return 1
    declare ret=($(pactree -cr "${pkg}"))
    if (( "${#ret[@]}" > 1 )); then
        echo -e "${ret[*]}"
        print_prompt "$(gettext 'Reverse dependency tree displayed')." "" 1
    else
        #((NOCLEAR)) || clear
        declare p=$(printf "$(gettext 'Package "%s" not used by other package')." "$pkg")
        print_prompt "$p"
    fi
}



########   main    ########

while true; do
    menu_show
    read choix
    case $choix in
        1)
            echo
            sudo pacman -Syu --color always
            echo
            print_hook
            print_prompt "$(gettext 'Your system is updated')." "" 1
            ;;
        2)
            echo
            sudo pacman-mirrors -g && sudo pacman -Syy --color always
            yaourt -Qdt
            paccache -ruvk0
            paccache -rvk2
			
			disk=$(df --output="source,target" | grep "/$" | cut -c 6-8 )
			[[ $(cat $(find /sys -name "rotational" 2>/dev/null | grep "$disk/queue")) == "1" ]] && sudo pacman-optimize
			unset disk
			
			echo
            print_hook
            print_prompt "$(gettext 'System is updated and cache is cleaned')." "" 1
			;;
        3)
            echo
            pkg=($(print_enter "$(gettext 'Select packages to install (use TAB to toggle selection)')" \
                "$(package-query -Sl -f '%n - %d')" '-m' ))
            sudo pacman -S "${pkg[@]}" --color always
            unset pkg
            echo
            print_hook
            print_prompt "$(gettext 'Package installation is finished')." "" 1
            ;;
        4)
            echo
            pkg=($(print_enter "$(gettext 'Select packages to remove (use TAB to toggle selection)')" \
                "$(pacman -Qq)" '-m' ))
            (($?!=0)) && continue
            [ -z "$pkg" ] && continue
            sudo pacman -Rsn "${pkg[@]}" --color always
            print_prompt "$(gettext 'Package and all unneeded dependencies removed')." "" 1
            ;;
        5)
            clear
            echo
            yaourt -Qq > /tmp/local_packages
            
            cat /tmp/packages /tmp/local_packages | sort | uniq > /tmp/all_packages
            pkg=$(cat /tmp/packages | fzf-tmux -e --reverse --prompt='Select a package to display information about >')
            if (yaourt -Qq "${pkg}" &>/dev/null); then
                out=$(yaourt -Qii "${pkg}")
            else
                out=$(yaourt -Sii "${pkg}")
            fi
            echo -e "$out" | grep -v "\-\-$" | sed 's/ : \(.*\)/ \x1b[0m: \x1b[1m\1\x1b[0m/; s/  \(.*\)/  \x1b[1m\1\x1b[0m/'
            unset pkg out
            echo -e "\n$NC Package information displayed. To return to pacli press [Enter] $NC"
            read
            ;;
        6)
            echo
            pkg=($(print_enter "$(gettext 'Select a packages of which to list all files (use TAB to toggle selection)')" \
            "$(pacman -Qq)" '-m' ))
            (($?!=0)) && continue
            [ -z "$pkg" ] && continue
            pacman -Ql "${pkg[@]}" --color always
            echo
            echo -e "$NC All local files in package listed. To return to pacli press [Enter] $NC"
            read
            ;;
        7)
            echo
            pactree_run "$choix"
            ;;
        8)
            echo
            pactree_reverse "$choix"
            ;;
        9)
            echo
            sudo pacman-optimize
            print_prompt "$(gettext 'Pacman Database defragmented and optimized for HDDs')." "" 1
            ;;
        10)
            echo
            help_text
            echo
            ;;
        11)
            echo
            pkg=$(print_enter "$(gettext 'Select package to downgrade')" "$(pacman -Qq)" )
            (($?!=0)) && continue
            [ -z "$pkg" ] && continue
            downgrade "${pkg}"
            unset pkg
            print_prompt "$(gettext 'Downgrade process finished')." "" 1
            ;;
        12)
            echo
            tail -2000 /var/log/pacman.log
            print_prompt "$(gettext 'Last 2000 lines of Pacman Log displayed. Navigate with SHIFT+PageUp')." "" 1
            ;;
        120):
            echo
            pkg=$(print_enter "$(gettext 'Select package')" "$(yaourt -Slq)" )
            (($?!=0)) && continue
            [ -z "$pkg" ] && continue
            grep "\[ALPM\]" /var/log/pacman.log | grep " $pkg"
            unset pkg
            print_prompt "$(gettext 'Pacman history')." "" 1
            ;;
        13)
            echo
            fix_errors "$choix"
            ;;
        14)
            echo
            [[ -z "$EDITOR" ]] && EDITOR='nano'
            sudo $EDITOR /etc/pacman.conf
            ;;
        15)
            echo
            pkg=$(print_enter "$(gettext 'Select package to install ')" "$(pacman -Slq)" )
            (($?!=0)) && continue
            [ -z "$pkg" ] && continue
            sudo pacman -S --force "$pkg" --color always
            unset pkg
            print_prompt "$(gettext 'Package installation in force mode is finished')." "" 1
            ;;
        16)
            echo
            sudo pacman -Syu --force --color always
            print_prompt "$(gettext 'Your system is updated in force mode')." "" 1
            ;;
        17)
            echo
            pkg=$(print_enter "$(gettext 'Select packages to remove')" "$(pacman -Qq)" )
            (($?!=0)) && continue
            [ -z "$pkg" ] && continue
            sudo pacman -Rdd "$pkg" --color always
            unset pkg
            print_prompt "$(gettext 'Dependency in force mode removed')." "" 1
            ;;
        18)
            echo
            yaourt -Scc
            print_prompt "$(gettext 'Entire package cache emptied')."
            ;;
        19)
            echo
            yaourt -Syua
            print_prompt "$(gettext 'Your system is updated')." "" 1
            ;;
        20)
            echo
            yaourt -Syua && yaourt -Syua --devel --noconfirm
            print_prompt "$(gettext 'All AUR packages reinstalled')." "" 1
            ;;
        21)
            echo
            echo "Enter name of package to be searched and installed from AUR and press [Enter] to continue"
            echo
            read package
            [ -n "$package" ] && yaourt "$package"
            unset $package
            print_prompt "$(gettext 'Yaourt finished')." "" 1
            ;;
        22)
            echo
            yaourt -S $(cat /tmp/packages | fzf-tmux -e -m --reverse --prompt='Select packages to install (toggle selection with TAB) >')
            print_prompt "$(gettext 'Installation from AUR finished')." "" 1
            ;;
        220)
            echo
            dirgit='/tmp/pacli-git'
            [ -d "$dirgit" ] && rm -rf "$dirgit"
            read -p 'Enter git url repository: ' -r url
            git clone "$url" "$dirgit" && ( if [ -d "$dirgit" ]; then
                cd "$dirgit"
                makepkg -scfi
            fi)
            [ -d "$dirgit" ] && rm -rf "$dirgit"
            unset url dirgit
            print_prompt "$(gettext 'Installation from git repo finished')."
            ;;
        23)
            echo
            pacman -Qem --color always
            print_prompt "$(gettext 'All locally installed packages listed')." "" 1
            ;;
        24)
            echo
            [[ -z "$EDITOR" ]] && EDITOR='nano'
            file="$HOME/.yaourtrc"
            [ -f "$file" ] || file="$HOME/.config/yaourtrc"
            if [ -f "$file" ]; then 
                $EDITOR "$file"
            else 
                cp /etc/yaourtrc "$file" && $EDITOR "$file"
            fi
            unset file
            echo
            ;;            
        0)
            clear && exit
            ;;
        *h)
            if [[ "$choix" =~ "h" ]]; then
                no=$(echo "$choix" | grep -Eo "[0-9]*")
                clear
                help_text $no
                echo -e "\nTo return to pacli press [Enter] $NC"
                ((no>0)) && read
                continue
            fi
            ;;
        *)
            echo -e "$RED Wrong option $NC"
            echo "Wait and try again later..."
            echo
            sleep 1
            clear
            ;;
    esac
done
exit 0
